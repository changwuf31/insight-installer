#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Install Chef software for client and workstation (no configuration).

Don't reinstall if already available at the right version.

"""
from hashlib import sha1
from optparse import OptionParser
import subprocess
import sys
import urllib


default_omnibus_url = "http://opscode.com/chef/install.sh"
# default_chef_version = "10.14.4"


def chef_version():
    args = ['chef-client', '-v']
    process = subprocess.Popen(args, stdout=subprocess.PIPE)
    version = process.communicate()[0]
    process.wait()
    version = version.strip()
    version = version[len('Chef: '):]
    return version


def install_chef():
    install_script = urllib.urlretrieve(default_omnibus_url)[0]
    # Control downloaded script's hash.
    control = sha1()
    control.update(open(install_script).read())
    # Can't control SHA1, since omnibus install script is for "latest" only!
#    control_sha1 = control.hexdigest()
#    if control_sha1 != default_omnibus_sha1:
#        raise Exception("Omnibus script SHA1 (%s) doesn't match expected " \
#                        "value (%s)." % (control_sha1, default_omnibus_sha1))
    # Run install script.
    return subprocess.call(['bash'], stdin=open(install_script))


def main():
    usage = """Usage: %prog [options]"""
    parser = OptionParser(usage=usage)
    (options, args) = parser.parse_args()

    # Check if Chef is installed.
    try:
        version = chef_version()
        print "Found installed Chef version %s" % version
    except:
        print "Couldn't get Chef version (not installed?)"
        version = None
    if not version:
        do_install = True
    # elif version != default_chef_version:
    #     print "Installing Chef version %s..." % default_chef_version
    #     do_install = True
    else:
        print "Chef version matches requirements."
        do_install = False

    if not do_install:
        return 0

    return install_chef()


if __name__ == '__main__':
    sys.exit(main())
